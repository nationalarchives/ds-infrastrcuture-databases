# source EC2 playbook
---
- name: Initialise PostgreSQL Source EBS
  hosts: localhost
  gather_facts: false
  module_default:
    group/aws:
      access_key: "{{ session_credentials.sts_creds.access_key }}"
      secret_key: "{{ session_credentials.sts_creds.secret_key }}"
      session_token: "{{ session_credentials.sts_creds.session_token }}"
      region: "{{ region }}"

  tasks:
  - name: set var file name
    ansible.builtin.set_fact:
      var_file: "vars_{{ lookup('env', 'ENVIRONMENT') }}.yml"

  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ var_file }}"

  - name: get AWS session token
    community.aws.sts_session_token:
      duration_seconds: 3600
    register: session_credentials

  - name: switch role credentials
    community.aws.sts_assume_role:
#      access_key: "{{ session_credentials.sts_creds.access_key }}"
#      secret_key: "{{ session_credentials.sts_creds.secret_key }}"
#      session_token: "{{ session_credentials.sts_creds.session_token }}"
      role_arn: "{{ lookup ('env', 'AWS_ROLE_ARN') }}"
      role_session_name: "s-devops"
    register: assumed_role

  - name: initialise environment
    ansible.builtin.include_tasks:
      file: ./includes/init-env.yml

  - name: launch instance
    ansible.builtin.include_tasks:
      file: ./includes/setup-ec2.yml

- name: switch to ec2hosts
  hosts: ec2hosts
  gather_facts: false

  tasks:
  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ hostvars['localhost']['var_file'] }}"

  - name: set variables ec2hosts
    ansible.builtin.set_fact:
      ebs_target_zone: "{{ zone_source }}"
      ebs_tag_name: "{{ lookup ('env', 'PREFIX') }}-source-ebs"
      subnet_id: "{{ hostvars['localhost']['subnet_id_a'] }}"
      ansible_ssh_private_key_file: "{{ lookup('env', 'KEY_NAME') }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "checking status of new instance before ami can be build"
        - "20 second interval with max duration of 5 minutes"
        - "====================================================================="

  - name: check if ec2 instance is ready
    ansible.builtin.stat:
      path: "/finish-init.txt"
    register: init_finished
    until: "init_finished.stat.exists"
    retries: 15
    delay: 20

- name: AMI and clean up
  hosts: localhost
  gather_facts: true

  tasks:
  - name: create AMI
    amazon.aws.ec2_ami:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      instance_id: "{{ instance_id }}"
      name: "{{ lookup ('env', 'PREFIX') }}-primer-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
      description: "postgres primer - ready for deployment"
      region: "{{ region }}"
      state: "present"
      wait: yes
      tags:
        Name: "{{ lookup ('env', 'PREFIX') }}-primer-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false

  - name: remove resources
    ansible.builtin.include_tasks:
      file: ./includes/remove-resources.yml
...
