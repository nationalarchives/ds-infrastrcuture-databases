# EBS playbook
---
- name: Initialise PostgreSQL Source EBS
  hosts: localhost
  gather_facts: false

  tasks:
  - name: set var file name
    ansible.builtin.set_fact:
      var_file: "vars_{{ lookup('env', 'ENVIRONMENT') }}.yml"
      target_ebs: "source"

  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ var_file }}"

  - name: get AWS session token
    community.aws.sts_session_token:
      duration_seconds: 3600
    register: session_credentials

  - name: switch role credentials
    community.aws.sts_assume_role:
      access_key: "{{ session_credentials.sts_creds.access_key }}"
      secret_key: "{{ session_credentials.sts_creds.secret_key }}"
      session_token: "{{ session_credentials.sts_creds.session_token }}"
      role_arn: "{{ lookup ('env', 'AWS_ROLE_ARN') }}"
      role_session_name: "s-devops"
    register: assumed_role

  - name: initialise environment
    ansible.builtin.include_tasks:
      file: ./includes/init-env.yml

  - name: set variables for source ebs
    set_fact:
      ebs_target_zone: "{{ zone_source }}"
      ebs_tag_name: "{{ lookup ('env', 'EBS_PREFIX') }}-source-ebs"
      subnet_id: "{{ subnet_id_a }}"

  - name: setup ebs
    ansible.builtin.include_tasks:
      file: ./includes/setup-ebs.yml

  - name: launch temp instance
    ansible.builtin.include_tasks:
      file: ./includes/setup-temp-ec2.yml

- name: switch to ec2hosts
  hosts: ec2hosts
  gather_facts: false

  tasks:
  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ hostvars['localhost']['var_file'] }}"

  - name: set variables for source ebs
    set_fact:
      ebs_target_zone: "{{ zone_source }}"
      ebs_tag_name: "{{ lookup ('env', 'EBS_PREFIX') }}-source-ebs"
      subnet_id: "{{ subnet_id_a }}"

  - name: set variables for source ebs
    ansible.builtin.set_fact:
      ansible_ssh_private_key_file: "{{ key_name }}-{{ target_ebs }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "checking status of new instance before ami can be build"
        - "20 second interval with max duration of 5 minutes"
        - "====================================================================="

  - name: check if ec2 instance is ready
    ansible.builtin.stat:
      path: "/finish-init.txt"
#    remote_user: ec2-user
    register: init_finished
    until: "init_finished.stat.exists"
    retries: 15
    delay: 20

  - name: setup bash scripts
    ansible.builtin.include_tasks:
      file: ./includes/setup-bash-scripts.yml

- name: Cleanup
  hosts: localhost
  gather_facts: false

  tasks:
  - name: remove resources
    ansible.builtin.include_tasks:
      file: ./includes/remove-resources.yml
...
