---
- name: initiate ebs
  amazon.aws.ec2_vol:
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
    zone: "{{ ebs_target_zone }}"
    multi_attach: false
    volume_size: "{{ ebs_size }}"
    volume_type: "{{ ebs_type }}"
    encrypted: "{{ ebs_encryption }}"
    state: "present"
    tags:
      Name: "{{ ebs_tag_name }}"
      Service: "PostgreSQL"
      Owner: "Digital Services"
      CostCentre: "53"
  register: source_ebs

- name: provisioning instance
  amazon.aws.ec2_instance:
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
    key_name: "{{ key_name }}"
    image_id: "{{ latest_ami.image_id }}"#
    instance_role: "{{ iam_role_name }}"
    instance_type: "t3a.small"
    metadata_options:
      http_endpoint: "enabled"
      http_tokens: "required"
    name : "{{ instance_name }}"
    network:
      assign_public_ip: no
      delete_on_termination: yes
      subnet_id: "{{ subnet_id }}"
    region: "{{ region }}"
    security_groups: ["{{ ec2_sec_group.group_id }}", "{{ db_sg.security_groups[0].group_id }}"]
    state: "running"
    termination_protection: no
    user_data: "{{ lookup('file', './userdata.sh') }}"
    wait: true
    volumes:
      - device_name: "/dev/xvda"
        ebs:
          delete_on_termination: true
          encrypted: true
          volume_size: "{{ volume_size }}"
    vpc_subnet_id: "{{ subnet_id }}"
    tags:
      Environment: "{{ env }}"
      Service: "{{ service }}"
      Owner: "Digital Services"
      CreatedBy: "ansible"
      CostCentre: 53
      Terraform: false
  register: ec2

- name: connect ebs to instance
  amazon.aws.ec2_vol:
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
    instance: ec2.instances[0].instance_id
    id: source_ebs.volume_id
    device_name: /dev/sdf
    delete_on_termination: false

- name: get instance ip address
  set_fact:
    instance_private_ip: "{{ ec2.instances[0].private_ip_address }}"
    instance_public_ip: "{{ ec2.instances[0].public_ip_address }}"
    instance_id: "{{ ec2.instances[0].instance_id }}"

- ansible.builtin.debug:
    msg:
      - "====================================================================="
      - "instance started up"
      - "instance private ip: {{ instance_private_ip }}"
      - "instance id: {{ instance_id }}"
      - "instance public ip {{ instance_public_ip }}"
      - "====================================================================="

- name: register new ec2 as host
  add_host:
    hostname: "{{ instance_public_ip }}"
    groups: ec2hosts
    ansible_user: ec2-user
    remote_user: ec2-user
    gather_facts: no

- name: wait for SSH service to bind on new instance
  wait_for:
    host: "{{ instance_public_ip }}"
    port: 22
    delay: 90
    timeout: 600
    state: started
  tags: [ami]

- name: switch to ec2hosts - checking if setup has finished
  hosts: ec2hosts
  gather_facts: false
  tasks:
  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "checking status of new instance before ami can be build"
        - "20 second interval with max duration of 15 minutes"
        - "====================================================================="

- name: check if ec2 instance is ready
  ansible.builtin.stat:
    path: "/var/finish-init.txt"
  remote_user: ec2-user
  register: init_finished
  until: "init_finished.stat.exists"
  retries: 45
  delay: 20

...
