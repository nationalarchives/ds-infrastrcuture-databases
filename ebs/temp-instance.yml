---
  - name: provisioning temp instance
    amazon.aws.ec2_instance:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      key_name: "{{ key_name }}"
      image_id: "{{ latest_ami.image_id }}"#
      instance_role: "{{ iam_role_name }}"
      instance_type: "t3a.small"
      metadata_options:
        http_endpoint: "enabled"
        http_tokens: "required"
      name : "postgres-temp-instance"
      network:
        assign_public_ip: yes
        delete_on_termination: yes
        subnet_id: "{{ public_subnet_id }}"
      region: "{{ region }}"
      security_groups: ["{{ ec2_sec_group.group_id }}"]
      state: "running"
      termination_protection: no
      user_data: "{{ lookup('file', './userdata.sh') }}"
      wait: true
      volumes:
        - device_name: "/dev/xvda"
          ebs:
            delete_on_termination: true
            encrypted: true
            volume_size: "{{ volume_size }}"
      vpc_subnet_id: "{{ public_subnet_id }}"
      tags:
        Environment: "{{ env }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false
    register: ec2

  - name: get instance ip address
    set_fact:
      instance_private_ip: "{{ ec2.instances[0].private_ip_address }}"
      instance_public_ip: "{{ ec2.instances[0].public_ip_address }}"
      instance_id: "{{ ec2.instances[0].instance_id }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "instance started up"
        - "instance private ip: {{ instance_private_ip }}"
        - "instance id: {{ instance_id }}"
        - "instance public ip {{ instance_public_ip }}"
        - "====================================================================="

  - name: register new ec2 as host
    add_host:
      hostname: "{{ instance_public_ip }}"
      groups: ec2hosts
      ansible_user: ec2-user
      remote_user: ec2-user
      gather_facts: no

  - name: set key file for ansible
    ansible.builtin.set_fact:
      ansible_ssh_private_key_file: "/tmp/{{ key_name }}"

  - name: wait for SSH service to bind on new instance
    wait_for:
      host: "{{ instance_public_ip }}"
      port: 22
      delay: 90
      timeout: 600
      state: started
    tags: [ami]

...

