---
  - name: get linux2 AMI
    amazon.aws.ec2_ami_info:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      owners: amazon
      region: "{{ region }}"
      filters:
        name: "amzn2-ami-hvm*"
    register: findami

  - name: set latest AMI
    set_fact:
      latest_ami: >
        {{ findami.images | sort(attribute='creation_date') | last }}

  - name: create temp ssh key
    community.crypto.openssh_keypair:
      path: "/tmp/{{ key_name }}"
      size: 2048
      comment: "temp@nationalarchives.gov.uk"
      mode: '600'
      state: "present"
      type: "rsa"

  - name: create key pair for instance
    amazon.aws.ec2_key:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "{{ key_name }}"
      key_material: "{{ lookup('file', '/tmp/' + key_name + '.pub') }}"

  - name: template userdata source
    vars:
      root_password: "{{ root_password }}"
      admin_user: "{{ admin_user }}"
      admin_password: "{{ admin_password }}"
      repl_user: "{{ repl_user }}"
      repl_password: "{{ repl_password }}"
      network_cidr: "{{ network_cidr }}"
      ebs_name: "{{ ebs_tag_name }}"
    template:
      src: "./templates/userdata-source.sh.j2"
      dest: "./userdata-source.sh"
      force: yes
      state: "present"

  - name: template attach source ebs source
    vars:
      ebs_name: "{{ ebs_tag_name }}"
      region: "{{ region }"
    template:
      src: "./templates/attach-source-ebs.sh.j2"
      dest: "./attach-source-ebs.sh"
      force: yes

  - name: template prepare ebs source source
    vars:
      root_password: "{{ root_password }}"
      admin_user: "{{ admin_user }}"
      admin_password: "{{ admin_password }}"
      repl_user: "{{ repl_user }}"
      repl_password: "{{ repl_password }}"
      network_cidr: "{{ network_cidr }}"
    template:
      src: "./templates/prep-ebs-source.sh.j2"
      dest: "./prep-ebs-source.sh"
      force: yes

  - name: provisioning temp instance
    amazon.aws.ec2_instance:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      key_name: "{{ key_name }}"
      image_id: "{{ latest_ami.image_id }}"#
      instance_role: "{{ iam_role_name }}"
      instance_type: "t3a.small"
      metadata_options:
        http_endpoint: "enabled"
        http_tokens: "required"
      name : "postgres-temp-instance"
      network:
        assign_public_ip: yes
        delete_on_termination: yes
        subnet_id: "{{ public_subnet_id }}"
      region: "{{ region }}"
      security_groups: ["{{ ec2_sec_group.group_id }}"]
      state: "running"
      termination_protection: no
      user_data: "{{ lookup('file', './userdata-source.sh') }}"
      wait: true
      volumes:
        - device_name: "/dev/xvda"
          ebs:
            delete_on_termination: true
            encrypted: true
            volume_size: "{{ volume_size }}"
      vpc_subnet_id: "{{ public_subnet_id }}"
      tags:
        Environment: "{{ env }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false
    register: ec2

  - name: get instance ip address
    set_fact:
      instance_private_ip: "{{ ec2.instances[0].private_ip_address }}"
      instance_public_ip: "{{ ec2.instances[0].public_ip_address }}"
      instance_id: "{{ ec2.instances[0].instance_id }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "instance started up"
        - "instance private ip: {{ instance_private_ip }}"
        - "instance id: {{ instance_id }}"
        - "instance public ip {{ instance_public_ip }}"
        - "====================================================================="

  - name: register new ec2 as host
    add_host:
      hostname: "{{ instance_public_ip }}"
      groups: ec2hosts
      ansible_user: ec2-user
      remote_user: ec2-user
      ansible_ssh_private_key_file: "/tmp/temp-pg-ebs-source-key"
      gather_facts: no

  - name: wait for SSH service to bind on new instance
    wait_for:
      host: "{{ instance_public_ip }}"
      port: 22
      delay: 90
      timeout: 600
      state: started
    tags: [ami]

  - name: Copy bash script to attach volume
    ansible.builtin.copy:
      src: ./attach-source-ebs.sh
      dest: /home/users/ec2-user/attach-source-ebs.sh
      owner: ec2-user
      group: ec2-user
      mode: '0744'

  - name: Copy bash script to prepare volume
    ansible.builtin.copy:
      src: ./prep-ebs-source.sh.sh
      dest: /home/users/ec2-user/prep-ebs-source.sh
      owner: ec2-user
      group: ec2-user
      mode: '0744'

  - name: Run attachment script
    ansible.builtin.script: /home/users/ec2-user/attach-source-ebs.sh

  - name: Run preparation script
    ansible.builtin.script: /home/users/ec2-user/prep-ebs-source.sh

...

