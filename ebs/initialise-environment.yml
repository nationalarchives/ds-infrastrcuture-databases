---
  - name: get linux2 AMI
    amazon.aws.ec2_ami_info:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      owners: amazon
      region: "{{ region }}"
      filters:
        name: "amzn2-ami-hvm*"
    register: findami

  - name: set latest AMI
    set_fact:
      latest_ami: >
        {{ findami.images | sort(attribute='creation_date') | last }}

  - name: create temp ssh key
    community.crypto.openssh_keypair:
      path: /tmp/id_ssh_rsa_source
      size: 2048
      comment: "temp@nationalarchives.gov.uk"
      mode: '0644'
      state: "present"
      type: "rsa"

  - name: create key pair for instance
    amazon.aws.ec2_key:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "{{ key_name_source }}"
      key_material: "{{ lookup('file', '/tmp/id_ssh_rsa_source.pub') }}"
      state: "present"

  - name: template userdata source
    vars:
      s3_deployment_bucket: "{{ s3_deployment_bucket }}"
      s3_deployment_root: "{{ s3_deployment_root }}"
    template:
      src: "./templates/instance-role-policy.json.j2"
      dest: "./instance-role-policy.json"
      force: yes

  - name: create deployment policy
    community.aws.iam_managed_policy:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      policy_name: "{{ deployment_policy_name }}"
      policy: "{{ lookup('file', './instance-role-policy.json') }}"
      state: "present"
    register: s3_policy

  - name: create postgres IAM role
    community.aws.iam_role:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "{{ iam_role_name }}"
      region: "{{ region }}"
      assume_role_policy_document: "{{ lookup('file', './templates/ec2-role-policy.json') }}"
      managed_policies: ["{{ s3_policy.policy.arn }}", "arn:aws:iam::aws:policy/SecretsManagerReadWrite"]
      create_instance_profile: yes
      delete_instance_profile: yes
      purge_policies: yes
      state: "present"
    register: ec2_iam_role

  - name: create security group - allowing updates and downloads
    amazon.aws.ec2_security_group:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "{{ ec2_sg_name }}"
      description: "security group allowing updates and downloads"
      region: "{{ region }}"
      vpc_id: "{{ lookup( 'env', 'VPC_ID') }}"
      rules:
        - proto: "tcp"
          from_port: 22
          to_port: 22
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow incoming ssh connections"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "for updates and downloads"
      rules_egress:
        - proto: "tcp"
          from_port: 80
          to_port: 80
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 443
          to_port: 443
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow replies"
      state: "present"
    register: ec2_sec_group

  - name: get db secrets
    ansible.builtin.set_fact:
      db_secret: "{{ lookup('amazon.aws.aws_secret', postgres_credentials_key, access_key=assumed_role.sts_creds.access_key, secret_key=assumed_role.sts_creds.secret_key, session_token=assumed_role.sts_creds.session_token, on_denied='error') | to_json }}"

  - name: set secrets
    set_fact:
      root_password: "{{ db_secret | from_json | json_query('root_password')}}"
      admin_user: "{{ db_secret | from_json | json_query('admin_user') }}"
      admin_pass: "{{ db_secret | from_json | json_query('admin_password') }}"
      repl_user: "{{ db_secret | from_json | json_query('repl_user') }}"
      repl_pass: "{{ db_secret | from_json | json_query('repl_password') }}"
      network_cidr: "{{ db_secret | from_json | json_query('network_cidr') }}"

  - name: get network information
    ansible.builtin.set_fact:
      nw_vpc_id: "{{ lookup('amazon.aws.aws_ssm', prefix_network_keys + '/vpc_id', access_key=assumed_role.sts_creds.access_key, secret_key=assumed_role.sts_creds.secret_key, session_token=assumed_role.sts_creds.session_token, on_denied='error') }}"
      nw_subnet_id_a: "{{ lookup('amazon.aws.aws_ssm', prefix_network_keys + '/private_db_subnet_2a_id', access_key=assumed_role.sts_creds.access_key, secret_key=assumed_role.sts_creds.secret_key, session_token=assumed_role.sts_creds.session_token, on_denied='error') }}"
      nw_subnet_id_b: "{{ lookup('amazon.aws.aws_ssm', prefix_network_keys + '/private_db_subnet_2b_id', access_key=assumed_role.sts_creds.access_key, secret_key=assumed_role.sts_creds.secret_key, session_token=assumed_role.sts_creds.session_token, on_denied='error') }}"
      nw_public_subnet_id_a: "{{ lookup('amazon.aws.aws_ssm', prefix_network_keys + '/public_subnet_2a_id', access_key=assumed_role.sts_creds.access_key, secret_key=assumed_role.sts_creds.secret_key, session_token=assumed_role.sts_creds.session_token, on_denied='error') }}"

  - name: set secrets
    set_fact:
      vpc_id: "{{ nw_vpc_id }}"
      subnet_id_a: "{{ nw_subnet_id_a }}"
      subnet_id_b: "{{ nw_subnet_id_b }}"
      public_subnet_id: "{{ nw_public_subnet_id_a }}"

  - name: template userdata source
    vars:
      root_password: "{{ root_password }}"
      admin_user: "{{ admin_user }}"
      admin_password: "{{ admin_password }}"
      repl_user: "{{ repl_user }}"
      repl_password: "{{ repl_password }}"
      network_cidr: "{{ network_cidr }}"
      ebs_name: "{{ ebs_tag_name }}"
    template:
      src: "./templates/userdata-source.sh.j2"
      dest: "./userdata.sh"
      force: yes
...
