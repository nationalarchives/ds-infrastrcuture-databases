---
- name: initiate ec2 elements
  block:
  - name: get linux2 AMI
    amazon.aws.ec2_ami_info:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      owners: amazon
      region: "{{ region }}"
      filters:
        name: "amzn2-ami-hvm*"
    register: findami

  - name: set latest AMI
    set_fact:
      latest_ami: >
        {{ findami.images | sort(attribute='creation_date') | last }}

  - name: create temp ssh key
    community.crypto.openssh_keypair:
      path: /tmp/id_ssh_rsa_source
      size: 2048
      comment: "temp@nationalarchives.gov.uk"
      mode: '0644'
      state: "present"
      type: "rsa"

  - name: create key pair for instance
    amazon.aws.ec2_key:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "{{ key_name_source }}"
      key_material: "{{ lookup('file', '/tmp/id_ssh_rsa_source.pub') }}"
      state: "present"

  - name: template userdata source
    vars:
      s3_deployment_bucket: "{{ s3_deployment_bucket }}"
      s3_deployment_root: "{{ s3_deployment_root }}"
    template:
      src: "./templates/instance-role-policy.json.j2"
      dest: "./instance-role-policy.json"
      force: yes

  - name: create deployment policy
    community.aws.iam_managed_policy:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      policy_name: "ansible-postgres-s3-policy"
      policy: "{{ lookup('file', './instance-role-policy.json') }}"
      state: "present"
    register: s3_policy

  - name: create postgres IAM role
    community.aws.iam_role:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-postgres-role"
      region: "{{ region }}"
      assume_role_policy_document: "{{ lookup('file', './templates/ec2-role-policy.json') }}"
      managed_policies: ["{{ s3_policy.policy.arn }}", "arn:aws:iam::aws:policy/SecretsManagerReadWrite"]
      create_instance_profile: yes
      delete_instance_profile: yes
      purge_policies: yes
      state: "present"
    register: ec2_iam_role

  - name: create security group - allowing updates and downloads
    amazon.aws.ec2_security_group:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-postgres-sg"
      description: "security group allowing updates and downloads"
      region: "{{ region }}"
      vpc_id: "{{ lookup( 'env', 'VPC_ID') }}"
      rules:
        - proto: "tcp"
          from_port: 22
          to_port: 22
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow incoming ssh connections"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "for updates and downloads"
      rules_egress:
        - proto: "tcp"
          from_port: 80
          to_port: 80
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 443
          to_port: 443
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow replies"
      state: "present"
    register: ec2_sec_group

      - name: set environment variables
        run: |
          echo "set vars"
          export AWS_ACCESS_KEY=${{ assumed_role.sts_creds.access_key }}
          export AWS_SECRET_KEY=${{ assumed_role.sts_creds.secret_key }}
          export AWS_SESSION_TOKEN=${{ assumed_role.sts_creds.session_token }}
          export AWS_DEFAULT_REGION=eu-west-2

  - name: get secrets
    ansible.builtin.set_fact:
      source_secret: >
        "{{ lookup('amazon.aws.aws_secret', credentials_key, access_key=assumed_role.sts_creds.access_key on_denied='error') | from_json }}"

  - name: set secrets
    set_fact:
      root_password: "{{ source_secret.root_password }}"
      admin_user: "{{ source_secret.admin_user }}"
      admin_pass: "{{ source_secret.admin_password }}"
      repl_user: "{{ source_secret.repl_user }}"
      repl_pass: "{{ source_secret.repl_password }}"
      network_cidr: "{{ source_secret.network_cidr }}"

  - name: template userdata source
    vars:
      root_password: "{{ root_password }}"
      admin_user: "{{ admin_user }}"
      admin_password: "{{ admin_password }}"
      repl_user: "{{ repl_user }}"
      repl_password: "{{ repl_password }}"
      network_cidr: "{{ network_cidr }}"
      ebs_name: "{{ ebs_tag_name }}"
    template:
      src: "./templates/userdata-source.sh.j2"
      dest: "./userdata.sh"
      force: yes

  - name: provisioning primer instance
    amazon.aws.ec2_instance:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      key_name: "{{ key_name }}"
      image_id: "{{ latest_ami.image_id }}"#
      instance_role: "ansible-ami-postgres-role"
      instance_type: "t3a.small"
      metadata_options:
        http_endpoint: "enabled"
        http_tokens: "required"
      name : "postgres-primer-source"
      network:
        assign_public_ip: yes
        delete_on_termination: yes
        subnet_id: "{{ lookup('env', 'SUBNET_ID_A') }}"
      region: "{{ region }}"
      security_groups: ["{{ ec2_sec_group.group_id }}", "{{ db_sg.security_groups[0].group_id }}"]
      state: "running"
      termination_protection: no
      user_data: "{{ lookup('file', './userdata.sh') }}"
      wait: true
      volumes:
        - device_name: "/dev/xvda"
          ebs:
            delete_on_termination: true
            encrypted: true
            volume_size: "{{ volume_size }}"
      vpc_subnet_id: "{{ lookup('env', 'SUBNET_ID_A') }}"
      tags:
        Environment: "{{ env }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false
    register: ec2

  - name: set up ebs
    amazon.aws.ec2_vol:
      access_key: "{{ assumed_role.sts_creds.access_key }}"
      secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      session_token: "{{ assumed_role.sts_creds.session_token }}"
      instance: ec2.instances[0].instance_id
      id: source_ebs.volume_id
      device_name: /dev/sdf
      delete_on_termination: false

...
